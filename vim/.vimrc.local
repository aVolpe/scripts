" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:

"FUNCTIONS {
" Matemática {
noremap <F5> :PreviewMarkdown<CR>
" }
"
" TextObject functions {
" Funciones internas {
" Adapted from unimpaired.vim by Tim Pope.
function! s:DoAction(algorithm,type)
  " backup settings that we will change
  let sel_save = &selection
  let cb_save = &clipboard
  " make selection and clipboard work the way we need
  set selection=inclusive clipboard-=unnamed clipboard-=unnamedplus
  " backup the unnamed register, which we will be yanking into
  let reg_save = @@
  " yank the relevant text, and also set the visual selection (which will be reused if the text
  " needs to be replaced)
  if a:type =~ '^\d\+$'
    " if type is a number, then select that many lines
    silent exe 'normal! V'.a:type.'$y'
  elseif a:type =~ '^.$'
    " if type is 'v', 'V', or '<C-V>' (i.e. 0x16) then reselect the visual region
    silent exe "normal! `<" . a:type . "`>y"
  elseif a:type == 'line'
    " line-based text motion
    silent exe "normal! '[V']y"
  elseif a:type == 'block'
    " block-based text motion
    silent exe "normal! `[\<C-V>`]y"
  else
    " char-based text motion
    silent exe "normal! `[v`]y"
  endif
  " call the user-defined function, passing it the contents of the unnamed register
  let repl = s:{a:algorithm}(@@)
  " if the function returned a value, then replace the text
  if type(repl) == 1
    " put the replacement text into the unnamed register, and also set it to be a
    " characterwise, linewise, or blockwise selection, based upon the selection type of the
    " yank we did above
    call setreg('@', repl, getregtype('@'))
    " relect the visual region and paste
    normal! gvp
  endif
  " restore saved settings and register value
  let @@ = reg_save
  let &selection = sel_save
  let &clipboard = cb_save
endfunction

function! s:ActionOpfunc(type)
  return s:DoAction(s:encode_algorithm, a:type)
endfunction

function! s:ActionSetup(algorithm)
  let s:encode_algorithm = a:algorithm
  let &opfunc = matchstr(expand('<sfile>'), '<SNR>\d\+_').'ActionOpfunc'
endfunction
function! MapAction(algorithm, key)
  exe 'nnoremap <silent> <Plug>actions'    .a:algorithm.' :<C-U>call <SID>ActionSetup("'.a:algorithm.'")<CR>g@'
  exe 'xnoremap <silent> <Plug>actions'    .a:algorithm.' :<C-U>call <SID>DoAction("'.a:algorithm.'",visualmode())<CR>'
  exe 'nnoremap <silent> <Plug>actionsLine'.a:algorithm.' :<C-U>call <SID>DoAction("'.a:algorithm.'",v:count1)<CR>'
  exe 'nmap '.a:key.'  <Plug>actions'.a:algorithm
  exe 'xmap '.a:key.'  <Plug>actions'.a:algorithm
  exe 'nmap '.a:key.a:key[strlen(a:key)-1].' <Plug>actionsLine'.a:algorithm
endfunction

" }

" Computes the md5 of the object string
function! s:ComputeMD5(str)
  let out = system('md5 |cut -b 1-32', a:str)
  " Remove trailing newline.
  let out = substitute(out, '\n$', '', '')
  return out
endfunction
call MapAction('ComputeMD5','<leader>M')
" }
" }

" Tab y configuración global {
set history=10000
set mouse=                      " Disable mouse
set shiftwidth=4                " Use indents of 4 spaces
set expandtab                   " Tabs are spaces, not tabs
set tabstop=4                   " An indentation every four columns
set nolist
set softtabstop=4             " Let backspace delete indent
set nopaste
set nonumber

set fileencodings=ucs-bom,utf8,prc
set spell
set spelllang=es,en
set nospell

"}

" Maps útiles {
nnoremap K i<CR><Esc>
map <leader>dt :%s/\s\+$//g<CR>:w<CR>

" Navegación {
imap jj <Esc><Esc><Esc>
imap jw <Esc>:w<CR>a
imap jk <Esc>:w<CR>
imap kj <Esc>:w<CR>
" }
" Resize options {
nnoremap <silent> <Leader>eh :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>rh :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> <Leader>ev :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> <Leader>rv :exe "vertical resize " . (winwidth(0) * 2/3)<CR>
" }
" Hora {
nnoremap <F8> "=strftime("%H:%M")<CR>P
nnoremap <F9> "=strftime("%Y%m%d")<CR>P
inoremap <F8> <C-R>=strftime("%H:%M")<CR>
inoremap <F9> <C-R>=strftime("%Y%m%d")<CR>
" }
"Ejecuta el archivo actual con ,r
nnoremap <leader>r :!%:p<CR>
command! -nargs=* -complete=shellcmd R new | setlocal buftype=nofile bufhidden=hide noswapfile | r !<args>


" Abre un archivo usando ranger con <leader>x
function RangerExplorer()
    exec "silent !ranger --choosefile=/tmp/vim_ranger_current_file " . expand("%:p:h")
    if filereadable('/tmp/vim_ranger_current_file')
        exec 'edit ' . system('cat /tmp/vim_ranger_current_file')
        call system('rm /tmp/vim_ranger_current_file')
    endif
    redraw!
endfun
map <Leader>x :call RangerExplorer()<CR>
" }


augroup FixFileType
    au BufRead,BufNewFile *.md set filetype=markdown
    au BufRead,BufNewFile *.tex set filetype=tex
    au BufNewFile,BufRead *.cs set foldmethod=syntax
    au BufNewFile,BufRead *.wiki AirlineToggle
    au BufNewFile,BufRead *.wiki AirlineToggle
augroup END

vmap ,x :!tidy -q -i --show-errors 0<CR>
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
let g:indent_guides_enable_on_vim_startup = 0

set diffopt+=vertical
set scrolloff=10

" Per file configuration {

" GIT {
au FileType gitcommit set fileencoding=utf8
au FileType gitcommit set spell
" }
" Tex{

augroup TexConfig
    au FileType tex iab enfemería enfermería
    au FileType tex set conceallevel=0
    au FileType tex set textwidth=80
    au FileType tex map \gq ?^$\\|^\s*\(\\begin\\|\\end\\|\\label\)?1<CR>gq//-1<CR>
    au FileType tex set wrap
augroup END
" Disable conceallevel (reemplazar letras por su versión formateada)
" }
" Vimwiki {
" See http://stackoverflow.com/questions/1313171/vim-combining-autocmd
augroup VimwikiAutowrite
    au FileType vimwiki set nobackup
    au FileType vimwiki set nowritebackup
    au FileType vimwiki set noswapfile
    au FileType vimwiki syntax on
    au FileType vimwiki set autowrite
    au FileType vimwiki set spell
    au FileType vimwiki hi clear SpellBad
    au FileType vimwiki hi SpellBad cterm=underline ctermfg=red
    au FocusLost *.wiki :w
    au FileType vimwiki set expandtab
    au FileType vimwiki set tabstop=2
    au FileType vimwiki set softtabstop=2
    au FileType vimwiki set shiftwidth=2
    au FileType vimwiki setlocal number
    au FileType vimwiki setlocal relativenumber
    au FileType vimwiki AirlineRefresh
    au FileType * call FixColorscheme()
augroup END

"}
" Markdown {
augroup MarkdownConfiguration
    au FileType markdown set wrap
    au FileType markdown set textwidth=80
    au FileType markdown set spell
    au FileType markdown hi clear SpellBad
    au FileType markdown hi SpellBad cterm=underline ctermfg=red
augroup END
" }
" Js {
au FileType javascript set tabstop=2 shiftwidth=2 expandtab smarttab
au FileType javascript set iskeyword-=.
au FileType javascript set foldmethod=manual
au FileType javascript set noautochdir

au FileType javascript let g:javascript_conceal=1
au FileType javascript set cole=1
au FileType javascript let g:javascript_conceal_function   = "ƒ"
au FileType javascript let g:javascript_conceal_null       = "ø"
au FileType javascript let g:javascript_conceal_this       = "@"
au FileType javascript let g:javascript_conceal_return     = "⇚"
au FileType javascript let g:javascript_conceal_undefined  = "¿"
au FileType javascript let g:javascript_conceal_NaN        = "ℕ"
au FileType javascript let g:javascript_conceal_prototype  = "¶"
au FileType javascript let g:javascript_conceal_static     = "•"
au FileType javascript let g:javascript_conceal_super      = "Ω"
au FileType javascript set nospell
" }
" Ts {
au FileType typescript set tabstop=2 shiftwidth=2 expandtab smarttab
au FileType typescript set iskeyword-=.
au FileType typescript set foldmethod=manual
au FileType typescript set noautochdir
au FileType typescript let g:tsuquyomi_completion_detail = 1
au FileType typescript setlocal completeopt+=menu,preview
au FileType typescript set nospell

au FileType vue set noautochdir
" }
" Yaml {
au FileType yaml set tabstop=2 shiftwidth=2 expandtab smarttab
" }
" ZSH {
    au FileType zsh setlocal syntax=shell
" }
" HTML {
au FileType html set tabstop=2 shiftwidth=2 expandtab smarttab
au FileType html set noautochdir
au FileType html runtime macros/matchit.vim

" }
" }
" Plugins: {
"" Plugin: AirlineInit {
call airline#parts#define_raw('linenr', '%l')
call airline#parts#define_raw('linet', '%L')
call airline#parts#define_accent('linenr', 'bold')
call airline#parts#define_accent('linet', 'bold')
let g:airline_section_z = airline#section#create(['%3p%% ', 'linenr', '/', 'linet', ':%c'])
" }
" Plugin: LatexBox {
"" Latexbox options
let g:LatexBox_quickfix = 1
let g:LatexBox_latexmk_preview_continuously=1
let g:LatexBox_latexmk_async=1
let g:LatexBox_latexmk_options = "-pvc -pdf -dvi-"
let g:LatexBox_build_dir = "target"
let g:LatexBox_Folding = 1
let g:PreviewBrowsers = "xdg-open"
" }
" Plugin: Startify {
"" Cabecera y pie:

function! s:filter_header(lines) abort
    let longest_line   = max(map(copy(a:lines), 'strwidth(v:val)'))
    let centered_lines = map(copy(a:lines),
        \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
    return centered_lines
endfunction
let g:startify_custom_header = s:filter_header(map(split(system('fortune | cowsay -f $(ls /usr/local/Cellar/cowsay/3.04/share/cows/*.cow | gshuf -n1) | lolcat'), '\n'), '"   ". v:val'))
let g:startify_bookmarks = [ '~/.vimrc.local',
            \ '~/.vimrc.bundles.local' ]
autocmd User Startified setlocal cursorline
let g:startify_skiplist = [
            \ 'COMMIT_EDITMSG',
            \ '.vimrc.local',
            \ '.vimrc.bundles.local'
            \ ]
""Tema
highlight StartifyBracket ctermfg=240
highlight StartifyFooter  ctermfg=114
highlight StartifyHeader  ctermfg=114
highlight StartifyNumber  ctermfg=215
highlight StartifyPath    ctermfg=245
highlight StartifySlash   ctermfg=240
highlight StartifySpecial ctermfg=240

" }
" Plugin: Peekaboo {
let g:peekaboo_window = 'rightbelow 30new'
"}
" Plugin: Ack vim {
if executable('ag')
    let g:ackprg = 'git --no-pager grep -n'
endif
" }
" Plugin: AutoPairs  {
let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutBackInsert = '<M-b>'

" }
" Plugin: NeoComplCache {
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_underbar_completion = 0
" }
" Plugin: easymotion {
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
" }
" Plugin: syntastic {
let g:syntastic_java_checkers = ['']
let g:syntastic_html_checkers = ['']
let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_check_on_open = 1


highlight SyntasticErrorSign        cterm=bold ctermbg=none  ctermfg=227
highlight SyntasticWarningSign      cterm=bold ctermbg=none  ctermfg=167
highlight SyntasticStyleErrorSign   cterm=bold ctermbg=none  ctermfg=167
highlight SyntasticStyleWarningSign cterm=bold ctermbg=none  ctermfg=227
" }
" Plugin: signify {
highlight clear SignColumn

let g:signify_sign_color_inherit_from_linenr = 1
let g:signify_sign_weight = 'NONE'
highlight clear SignColumn
highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
highlight SignifySignAdd    cterm=bold ctermbg=none ctermfg=119
highlight SignifySignDelete cterm=bold ctermbg=none ctermfg=167
highlight SignifySignChange cterm=bold ctermbg=none ctermfg=227

" }
" Plugin: bufferline {
let g:bufferline_echo = 1
" }
" Plugin: NerdCommenter {

let g:NERDCustomDelimiters = {
  \ 'rest': { 'left': '# ' },
\ }

" }
" Plugin: ctrp {
let g:ctrlp_match_window = 'bottom,order:ttb,min:5,max:10,results:10'
let g:ctrlp_extensions = ['funky', 'yankring']
" }
" Plugin: ctrp-funky {
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_funky_use_cache = 1
" }
" Plugin: choosewin {
nmap - <Plug>(choosewin)
let g:choosewin_overlay_enable = 1
" }
" Plugin: editorconfig-vim {
let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" }
" Plugin: rainbow {
let g:rainbow_conf = {
\   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
\   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
\   'operators': '_,_',
\   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
\   'separately': {
\       '*': {},
\       'html': 0
\   }
\}
" }
" Plugin: Vimwiki {
let wikiroot              = '~/.dropbox_data/Dropbox/'
let wiki                  = {}
let wiki.path             = wikiroot . '/wiki/'
let wiki.path_html        = wikiroot . '/wiki_html/'
let wiki.auto_export      = 1
let wiki.nested_syntaxes  = {'python': 'python', 'c++': 'cpp', 'sql' : 'sql'}
let wiki.template_path    = wiki.path  . '/template/'
let wiki.template_default = 'default'
let wiki.template_ext     = '.htm'
let wiki.auto_toc         = 1

let g:vimwiki_list = [ wiki ]
let g:vimwiki_rxTableSep = '|'
let g:vimwiki_folding = 'expr'
" }
" }
" Colorscheme {

function! FixColorscheme() " {
    hi! clear SpellBad
    hi! SpellBad cterm=underline,bold ctermfg=blue

    " Transparent background
    hi! Normal ctermbg=none
    " Match pairing http://stackoverflow.com/questions/10746750/set-vim-bracket-highlighting-colors
    hi! MatchParen cterm=bold ctermbg=none ctermfg=magenta
endfunction
" }
augroup mycolorschemes
    au!
    au ColorScheme * hi clear SpellBad
    au ColorScheme * call FixColorscheme()
augroup END

syntax on
set cursorline

"let g:hybrid_custom_term_colors = 1

colorscheme hybrid
set background=dark

" Configurar conceal color {
hi clear Conceal
hi Conceal ctermfg=yellow ctermbg=NONE
"}

hi clear SignColumn
highlight GitGutterAdd ctermfg=green ctermbg=NONE
highlight GitGutterChange ctermfg=yellow ctermbg=NONE
highlight GitGutterDelete ctermfg=red ctermbg=NONE
highlight GitGutterChangeDelete ctermfg=yellow ctermbg=NONE

hi Visual guifg=white guibg=white gui=none ctermfg=240 ctermbg=250  cterm=none

set fillchars+=vert:│
" Plugin: signify {
highlight clear SignColumn

let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

let g:signify_sign_color_inherit_from_linenr = 1
let g:signify_sign_weight = 'NONE'
highlight clear SignColumn
highlight DiffAdd           cterm=bold ctermbg=none ctermfg=119
highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167
highlight DiffChange        cterm=bold ctermbg=none ctermfg=227
highlight SignifySignAdd    cterm=bold ctermbg=none ctermfg=119
highlight SignifySignDelete cterm=bold ctermbg=none ctermfg=167
highlight SignifySignChange cterm=bold ctermbg=none ctermfg=227

" }
set noautochdir
" }
"
